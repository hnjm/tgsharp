namespace org.telegram.mtproto.secure.aes
{
    using IKVM.Attributes;
    using IKVM.Runtime;
    using java.lang;
    using org.telegram.mtproto.secure;
    using System;
    using System.Runtime.CompilerServices;

    public class AESFastEngine : Object
    {
        private const int BLOCK_SIZE = 0x10;
        private int C0;
        private int C1;
        private int C2;
        private int C3;
        private bool forEncryption;
        private const int m1 = -2139062144;
        private const int m2 = 0x7f7f7f7f;
        private const int m3 = 0x1b;
        [Modifiers(0x1a)]
        private static int[] rcon = new int[] { 
            1, 2, 4, 8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f,
            0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 250, 0xef, 0xc5, 0x91
        };
        private int ROUNDS;
        [Modifiers(0x1a)]
        private static byte[] S = new byte[] { 
            0x63, 0x7c, 0x77, 0x7b, -14, 0x6b, 0x6f, -59, 0x30, 1, 0x67, 0x2b, -2, -41, -85, 0x76,
            -54, -126, -55, 0x7d, -6, 0x59, 0x47, -16, -83, -44, -94, -81, -100, -92, 0x72, -64,
            -73, -3, -109, 0x26, 0x36, 0x3f, -9, -52, 0x34, -91, -27, -15, 0x71, -40, 0x31, 0x15,
            4, -57, 0x23, -61, 0x18, -106, 5, -102, 7, 0x12, -128, -30, -21, 0x27, -78, 0x75,
            9, -125, 0x2c, 0x1a, 0x1b, 110, 90, -96, 0x52, 0x3b, -42, -77, 0x29, -29, 0x2f, -124,
            0x53, -47, 0, -19, 0x20, -4, -79, 0x5b, 0x6a, -53, -66, 0x39, 0x4a, 0x4c, 0x58, -49,
            -48, -17, -86, -5, 0x43, 0x4d, 0x33, -123, 0x45, -7, 2, 0x7f, 80, 60, -97, -88,
            0x51, -93, 0x40, -113, -110, -99, 0x38, -11, -68, -74, -38, 0x21, 0x10, -1, -13, -46,
            -51, 12, 0x13, -20, 0x5f, -105, 0x44, 0x17, -60, -89, 0x7e, 0x3d, 100, 0x5d, 0x19, 0x73,
            0x60, -127, 0x4f, -36, 0x22, 0x2a, -112, -120, 70, -18, -72, 20, -34, 0x5e, 11, -37,
            -32, 50, 0x3a, 10, 0x49, 6, 0x24, 0x5c, -62, -45, -84, 0x62, -111, -107, -28, 0x79,
            -25, -56, 0x37, 0x6d, -115, -43, 0x4e, -87, 0x6c, 0x56, -12, -22, 0x65, 0x7a, -82, 8,
            -70, 120, 0x25, 0x2e, 0x1c, -90, -76, -58, -24, -35, 0x74, 0x1f, 0x4b, -67, -117, -118,
            0x70, 0x3e, -75, 0x66, 0x48, 3, -10, 14, 0x61, 0x35, 0x57, -71, -122, -63, 0x1d, -98,
            -31, -8, -104, 0x11, 0x69, -39, -114, -108, -101, 30, -121, -23, -50, 0x55, 40, -33,
            -116, -95, -119, 13, -65, -26, 0x42, 0x68, 0x41, -103, 0x2d, 15, -80, 0x54, -69, 0x16
        };
        [Modifiers(0x1a)]
        private static byte[] Si = new byte[] { 
            0x52, 9, 0x6a, -43, 0x30, 0x36, -91, 0x38, -65, 0x40, -93, -98, -127, -13, -41, -5,
            0x7c, -29, 0x39, -126, -101, 0x2f, -1, -121, 0x34, -114, 0x43, 0x44, -60, -34, -23, -53,
            0x54, 0x7b, -108, 50, -90, -62, 0x23, 0x3d, -18, 0x4c, -107, 11, 0x42, -6, -61, 0x4e,
            8, 0x2e, -95, 0x66, 40, -39, 0x24, -78, 0x76, 0x5b, -94, 0x49, 0x6d, -117, -47, 0x25,
            0x72, -8, -10, 100, -122, 0x68, -104, 0x16, -44, -92, 0x5c, -52, 0x5d, 0x65, -74, -110,
            0x6c, 0x70, 0x48, 80, -3, -19, -71, -38, 0x5e, 0x15, 70, 0x57, -89, -115, -99, -124,
            -112, -40, -85, 0, -116, -68, -45, 10, -9, -28, 0x58, 5, -72, -77, 0x45, 6,
            -48, 0x2c, 30, -113, -54, 0x3f, 15, 2, -63, -81, -67, 3, 1, 0x13, -118, 0x6b,
            0x3a, -111, 0x11, 0x41, 0x4f, 0x67, -36, -22, -105, -14, -49, -50, -16, -76, -26, 0x73,
            -106, -84, 0x74, 0x22, -25, -83, 0x35, -123, -30, -7, 0x37, -24, 0x1c, 0x75, -33, 110,
            0x47, -15, 0x1a, 0x71, 0x1d, 0x29, -59, -119, 0x6f, -73, 0x62, 14, -86, 0x18, -66, 0x1b,
            -4, 0x56, 0x3e, 0x4b, -58, -46, 0x79, 0x20, -102, -37, -64, -2, 120, -51, 90, -12,
            0x1f, -35, -88, 0x33, -120, 7, -57, 0x31, -79, 0x12, 0x10, 0x59, 0x27, -128, -20, 0x5f,
            0x60, 0x51, 0x7f, -87, 0x19, -75, 0x4a, 13, 0x2d, -27, 0x7a, -97, -109, -55, -100, -17,
            -96, -32, 0x3b, 0x4d, -82, 0x2a, -11, -80, -56, -21, -69, 60, -125, 0x53, -103, 0x61,
            0x17, 0x2b, 4, 0x7e, -70, 0x77, -42, 0x26, -31, 0x69, 20, 0x63, 0x55, 0x21, 12, 0x7d
        };
        [Modifiers(0x1a)]
        private static int[] T0 = new int[] { 
            -1520213050, -2072216328, -1720223762, -1921287178, 0xdf2f2ff, -1117033514, -1318096930, 0x54c5c591, 0x50303060, 0x3010102, -1452841010, 0x7d2b2b56, 0x19fefee7, 0x62d7d7b5, -424957107, -1703512340,
            0x45caca8f, -1652391393, 0x40c9c989, -2021818886, 0x15fafaef, -346465870, -918075506, 0xbf0f0fb, -324162239, 0x67d4d4b3, -39673249, -357585083, -1080255453, -140204973, -1770884380, 0x5bc0c09b,
            -1028147339, 0x1cfdfde1, -1366060227, 0x6a26264c, 0x5a36366c, 0x413f3f7e, 0x2f7f7f5, 0x4fcccc83, 0x5c343468, -190470831, 0x34e5e5d1, 0x8f1f1f9, -1821281822, 0x73d8d8ab, 0x53313162, 0x3f15152a,
            0xc040408, 0x52c7c795, 0x65232346, 0x5ec3c39d, 0x28181830, -1583966665, 0xf05050a, -1248159185, 0x907070e, 0x36121224, -1686077413, 0x3de2e2df, 0x26ebebcd, 0x6927274e, -843926913, -1619692054,
            0x1b090912, -1635548387, 0x742c2c58, 0x2e1a1a34, 0x2d1b1b36, -1301385508, -296068428, -73359269, -162377052, 0x4d3b3b76, 0x61d6d6b7, -827083907, 0x7b292952, 0x3ee3e3dd, 0x712f2f5e, -1752923117,
            -179088474, 0x68d1d1b9, 0, 0x2cededc1, 0x60202040, 0x1ffcfce3, -927878791, -312779850, -1100322092, 0x46cbcb8d, -641810841, 0x4b393972, -565556588, -733197160, -396863312, 0x4acfcf85,
            0x6bd0d0bb, 0x2aefefc5, -441800113, 0x16fbfbed, -985447546, -682799718, 0x55333366, -1803188975, -817543798, 0x10f9f9e9, 0x6020204, -2122350594, -263171936, 0x443c3c78, -1163944155, -475486133,
            -212774494, -22830243, -1069531008, -1970303227, -1382903233, -1130521311, 0x48383870, 0x4f5f5f1, -541279133, -1044990345, 0x75dadaaf, 0x63212142, 0x30101020, 0x1affffe5, 0xef3f3fd, 0x6dd2d2bf,
            0x4ccdcd81, 0x140c0c18, 0x35131326, 0x2fececc3, -513843266, -1567123659, -867941240, 0x3917172e, 0x57c4c493, -223893675, -2105639172, 0x473d3d7a, -1402706744, -413311558, 0x2b191932, -1787595802,
            -1604296512, -1736343271, -783331426, 0x7fdcdca3, 0x66222244, 0x7e2a2a54, -1416589253, -2088204277, -901364084, 0x29eeeec7, -742868885, 0x3c141428, 0x79dedea7, -497131844, 0x1d0b0b16, 0x76dbdbad,
            0x3be0e0db, 0x56323264, 0x4e3a3a74, 0x1e0a0a14, -615954030, 0xa06060c, 0x6c242448, -463709000, 0x5dc2c29f, 0x6ed3d3bd, -273896381, -1503501628, -1466855111, -1533700815, 0x37e4e4d3, -1954973198,
            0x32e7e7d5, 0x43c8c88b, 0x5937376e, -1217565222, -1936880383, 0x64d5d5b1, -766620004, -525751991, -1267962664, -95005012, 0x7f4f4f3, 0x25eaeacf, -1352309302, -1904575756, -374428089, 0x18080810,
            -709182865, -2005370640, 0x6f25254a, 0x722e2e5c, 0x241c1c38, -240736681, -944458637, 0x51c6c697, 0x23e8e8cb, 0x7cdddda1, -1670089496, 0x211f1f3e, -582268010, -591544991, -2037675251, -2054518257,
            -1871679264, 0x423e3e7c, -994724495, -1436129588, -666351472, 0x5030306, 0x1f6f6f7, 0x120e0e1c, -1553899070, 0x5f35356a, -111716434, -793134743, -1853454825, 0x58c1c199, 0x271d1d3a, -1180787161,
            0x38e1e1d9, 0x13f8f8eb, -1281845205, 0x33111122, -1150719534, 0x70d9d9a9, -1987146233, -1483434957, -1231316179, 0x221e1e3c, -1836611819, 0x20e9e9c9, 0x49cece87, -11184726, 0x78282850, 0x7adfdfa5,
            -1886614525, -123625127, -2138470135, 0x170d0d1a, -624967835, 0x31e6e6d7, -968736124, -1201116976, -1019133566, -1332111063, 0x772d2d5a, 0x110f0f1e, -877612933, -61582168, -692339859, 0x3a16162c
        };
        [Modifiers(0x1a)]
        private static int[] T1 = new int[] { 
            0x6363c6a5, 0x7c7cf884, 0x7777ee99, 0x7b7bf68d, -218956019, 0x6b6bd6bd, 0x6f6fdeb1, -976907948, 0x30306050, 0x1010203, 0x6767cea9, 0x2b2b567d, -16849127, -673729182, -1414836762, 0x7676ec9a,
            -892694715, -2105401443, -909539008, 0x7d7dfa87, -84218091, 0x5959b2eb, 0x47478ec9, -252642549, -1381154324, -724257945, -1566416899, -1347467798, -1667488833, -1532734473, 0x7272e496, -1061119141,
            -1212713534, -33693412, -1819066962, 0x26264c6a, 0x36366c5a, 0x3f3f7e41, -134744830, -859012273, 0x3434685c, -1515892236, -437923532, -235800312, 0x7171e293, -656888973, 0x31316253, 0x15152a3f,
            0x404080c, -943221422, 0x23234665, -1010590370, 0x18183028, -1768540255, 0x5050a0f, -1701171275, 0x7070e09, 0x12122436, -2139087973, -488448195, -336868058, 0x27274e69, -1296924723, 0x7575ea9f,
            0x909121b, -2088559202, 0x2c2c5874, 0x1a1a342e, 0x1b1b362d, 0x6e6edcb2, 0x5a5ab4ee, -1600103429, 0x5252a4f6, 0x3b3b764d, -690571423, -1280082482, 0x2929527b, -471605954, 0x2f2f5e71, -2071719017,
            0x5353a6f5, -774784664, 0, -303185620, 0x20204060, -50535649, -1313769016, 0x5b5bb6ed, 0x6a6ad4be, -875852474, -1094817831, 0x3939724b, 0x4a4a94de, 0x4c4c98d4, 0x5858b0e8, -808483510,
            -791626901, -269499094, -1431679003, -67375850, 0x434386c5, 0x4d4d9ad7, 0x33336655, -2054876780, 0x45458acf, -101062384, 0x2020406, 0x7f7ffe81, 0x5050a0f0, 0x3c3c7844, -1616960070, -1465365533,
            0x5151a2f3, -1549574658, 0x404080c0, -1886452342, -1835909203, -1650646596, 0x38387048, -168431356, -1128504353, -1229555775, -623202443, 0x21214263, 0x10102030, -6886, -202113778, -757940371,
            -842170036, 0xc0c1814, 0x13132635, -320027857, 0x5f5fbee1, -1751698014, 0x444488cc, 0x17172e39, -993750185, -1482205710, 0x7e7efc82, 0x3d3d7a47, 0x6464c8ac, 0x5d5dbae7, 0x1919322b, 0x7373e695,
            0x6060c0a0, -2122245736, 0x4f4f9ed1, -589520001, 0x22224466, 0x2a2a547e, -1869595733, -2004350077, 0x46468cca, -286341335, -1195873325, 0x1414283c, -555833479, 0x5e5ebce2, 0xb0b161d, -606360202,
            -522134725, 0x32326456, 0x3a3a744e, 0xa0a141e, 0x494992db, 0x6060c0a, 0x2424486c, 0x5c5cb8e4, -1027432611, -741098130, -1397996561, 0x6262c4a6, -1852753496, -1785384540, -454765769, 0x7979f28b,
            -404237006, -926381245, 0x37376e59, 0x6d6ddab7, -1920138868, -707415708, 0x4e4e9cd2, -1448523296, 0x6c6cd8b4, 0x5656acfa, -185273593, -353710299, 0x6565caaf, 0x7a7af48e, -1364310039, 0x8081018,
            -1162186795, 0x7878f088, 0x25254a6f, 0x2e2e5c72, 0x1c1c3824, -1499047951, -1263242297, -960063663, -387396829, -572677764, 0x7474e89c, 0x1f1f3e21, 0x4b4b96dd, -1111662116, -1953821306, -1970663547,
            0x7070e090, 0x3e3e7c42, -1246400060, 0x6666ccaa, 0x484890d8, 0x3030605, -151587071, 0xe0e1c12, 0x6161c2a3, 0x35356a5f, 0x5757aef9, -1179031088, -2038032495, -1044276904, 0x1d1d3a27, -1633802311,
            -505292488, -117904621, -1734857805, 0x11112233, 0x6969d2bb, -640046736, -1903294583, -1802226777, -1684329034, 0x1e1e3c22, -2021190254, -370554592, -825325751, 0x5555aaff, 0x28285078, -538991238,
            -1936981105, -1583261192, -1987507840, 0xd0d1a17, -1077975590, -421079247, 0x424284c6, 0x6868d0b8, 0x414182c3, -1718015568, 0x2d2d5a77, 0xf0f1e11, -1330611253, 0x5454a8fc, -1145344554, 0x16162c3a
        };
        [Modifiers(0x1a)]
        private static int[] T2 = new int[] { 
            0x63c6a563, 0x7cf8847c, 0x77ee9977, 0x7bf68d7b, -218165774, 0x6bd6bd6b, 0x6fdeb16f, -980331323, 0x30605030, 0x1020301, 0x67cea967, 0x2b567d2b, -18408962, -675978537, -1420958037, 0x76ec9a76,
            -896580150, -2111857278, -913751863, 0x7dfa877d, -84994566, 0x59b2eb59, 0x478ec947, -251982864, -1388188499, -726439980, -1570767454, -1354372433, -1675378788, -1538000988, 0x72e49672, -1063560256,
            -1217019209, -35578627, -1824674157, 0x264c6a26, 0x366c5a36, 0x3f7e413f, -134937865, -863809588, 0x34685c34, -1521355611, -439274267, -235337487, 0x71e29371, -659852328, 0x31625331, 0x152a3f15,
            0x4080c04, -946515257, 0x23466523, -1013096765, 0x18302818, -1774739050, 0x50a0f05, -1708149350, 0x70e0907, 0x12243612, -2145674368, -488686110, -338876693, 0x274e6927, -1300247118, 0x75ea9f75,
            0x9121b09, -2095210877, 0x2c58742c, 0x1a342e1a, 0x1b362d1b, 0x6edcb26e, 0x5ab4ee5a, -1604584544, 0x52a4f652, 0x3b764d3b, -692624938, -1283600717, 0x29527b29, -472039709, 0x2f5e712f, -2079090812,
            0x53a6f553, -776378159, 0, -306107155, 0x20406020, -52224004, -1317418831, 0x5bb6ed5b, 0x6ad4be6a, -879933749, -1100490306, 0x39724b39, 0x4a94de4a, 0x4c98d44c, 0x58b0e858, -813348145,
            -793023536, -272291089, -1437604438, -68348165, 0x4386c543, 0x4d9ad74d, 0x33665533, -2062445435, 0x458acf45, -102166279, 0x2040602, 0x7ffe817f, 0x50a0f050, 0x3c78443c, -1624917345, -1471421528,
            0x51a2f351, -1554121053, 0x4080c040, -1895462257, -1841320558, -1658733411, 0x38704838, -168753931, -1134305348, -1233665610, -626035238, 0x21426321, 0x10203010, -1762561, -201519373, -759206446,
            -847164211, 0xc18140c, 0x13263513, -322752532, 0x5fbee15f, -1758092649, 0x4488cc44, 0x172e3917, -996976700, -1487539545, 0x7efc827e, 0x3d7a473d, 0x64c8ac64, 0x5dbae75d, 0x19322b19, 0x73e69573,
            0x60c0a060, -2129028991, 0x4f9ed14f, -593264676, 0x22446622, 0x2a547e2a, -1875137648, -2012511352, 0x468cca46, -288937490, -1200893000, 0x14283c14, -559449634, 0x5ebce25e, 0xb161d0b, -609388837,
            -522503200, 0x32645632, 0x3a744e3a, 0xa141e0a, 0x4992db49, 0x60c0a06, 0x24486c24, 0x5cb8e45c, -1029743166, -742560045, -1404833876, 0x62c4a662, -1858492271, -1791908715, -455919644, 0x79f28b79,
            -405458201, -930397240, 0x376e5937, 0x6ddab76d, -1929278323, -709794603, 0x4e9cd24e, -1454776151, 0x6cd8b46c, 0x56acfa56, -185399308, -355523094, 0x65caaf65, 0x7af48e7a, -1371018834, 0x8101808,
            -1167075910, 0x78f08878, 0x254a6f25, 0x2e5c722e, 0x1c38241c, -1504185946, -1267480652, -963161658, -389340184, -576619299, 0x74e89c74, 0x1f3e211f, 0x4b96dd4b, -1117659971, -1962047861, -1978694262,
            0x70e09070, 0x3e7c423e, -1250835275, 0x66ccaa66, 0x4890d848, 0x3060503, -151584266, 0xe1c120e, 0x61c2a361, 0x356a5f35, 0x57aef957, -1184247623, -2045275770, -1046914879, 0x1d3a271d, -1641563746,
            -505857823, -118811656, -1741966440, 0x11223311, 0x69d2bb69, -643206951, -1912108658, -1808554092, -1691502949, 0x1e3c221e, -2028629369, -372694807, -829994546, 0x55aaff55, 0x28507828, -542803233,
            -1945923700, -1587939167, -1995865975, 0xd1a170d, -1083843905, -422104602, 0x4284c642, 0x68d0b868, 0x4182c341, -1725321063, 0x2d5a772d, 0xf1e110f, -1334064208, 0x54a8fc54, -1150429509, 0x162c3a16
        };
        [Modifiers(0x1a)]
        private static int[] T3 = new int[] { 
            -962239645, -125535108, -291932297, -158499973, -15863054, -692229269, -558796945, -1856715323, 0x60503030, 0x2030101, -827758745, 0x567d2b2b, -417726722, -1251813417, 0x4de6abab, -325421450,
            -1891251510, 0x1f9d8282, -1992242743, -91783811, -283772166, -1293199015, -1899411641, -83103504, 0x41ecadad, -1285040940, 0x5ffda2a2, 0x45eaafaf, 0x23bf9c9c, 0x53f7a4a4, -459902350, -1688485696,
            0x75c2b7b7, -518193667, 0x3dae9393, 0x4c6a2626, 0x6c5a3636, 0x7e413f3f, -184354825, -2091922228, 0x685c3434, 0x51f4a5a5, -785062427, -116854287, -493653647, -1418471208, 0x62533131, 0x2a3f1515,
            0x80c0404, -1789737017, 0x46652323, -1654733885, 0x30281818, 0x37a19696, 0xa0f0505, 0x2fb59a9a, 0xe090707, 0x24361212, 0x1b9b8080, -549592350, -853087253, 0x4e692727, 0x7fcdb2b2, -358648459,
            0x121b0909, 0x1d9e8383, 0x58742c2c, 0x342e1a1a, 0x362d1b1b, -592286098, -1259447718, 0x5bfba0a0, -1527360942, 0x764d3b3b, -1218324778, 0x7dceb3b3, 0x527b2929, -583080989, 0x5e712f2f, 0x13978484,
            -1493871789, -1184312879, 0, -1054020115, 0x40602020, -484442884, 0x79c8b1b1, -1225958565, -725718422, -1924740149, 0x67d9bebe, 0x724b3939, -1797371318, -1730917300, -1326950312, -2058694705,
            -1150562096, -987041809, 0x4fe5aaaa, -317260805, -2033892541, -1697166003, 0x66553333, 0x11948585, -1966127803, -384763399, 0x4060202, -25067649, -1594863536, 0x78443c3c, 0x25ba9f9f, 0x4be3a8a8,
            -1561112239, 0x5dfea3a3, -2134884288, 0x58a8f8f, 0x3fad9292, 0x21bc9d9d, 0x70483838, -251333131, 0x63dfbcbc, 0x77c1b6b6, -1351230758, 0x42632121, 0x20301010, -451215361, -49351693, -1083321646,
            -2125673011, 0x18140c0c, 0x26351313, -1020269332, -1092526241, 0x35a29797, -1999879100, 0x2e391717, -1822964540, 0x55f2a7a7, -58556802, 0x7a473d3d, -928226204, -1159242403, 0x322b1919, -426413197,
            -1063231392, 0x19988181, -1630449841, -1551901476, 0x44662222, 0x547e2a2a, 0x3bab9090, 0xb838888, -1932900794, -953553170, 0x6bd3b8b8, 0x283c1414, -1485185314, -1126015394, 0x161d0b0b, -1384719397,
            -616832800, 0x64563232, 0x744e3a3a, 0x141e0a0a, -1831122615, 0xc0a0606, 0x486c2424, -1192993700, -1621245246, -1116810285, 0x43efacac, -995728798, 0x39a89191, 0x31a49595, -751311644, -225740423,
            -718084121, -1958491960, 0x6e593737, -625513107, 0x18c8d8d, -1318791723, -1663938994, 0x49e0a9a9, -659264404, -1392880042, -217582348, -819598614, -894474907, -191989126, 0x47e9aeae, 0x10180808,
            0x6fd5baba, -259491720, 0x4a6f2525, 0x5c722e2e, 0x38241c1c, 0x57f1a6a6, 0x73c7b4b4, -1756248378, -886839064, -1585652259, -392399756, 0x3e211f1f, -1763882165, 0x61dcbdbd, 0xd868b8b, 0xf858a8a,
            -527404944, 0x7c423e3e, 0x71c4b5b5, -861247898, -1864873912, 0x6050303, -150866186, 0x1c120e0e, -1029480095, 0x6a5f3535, -1359390889, 0x69d0b9b9, 0x17918686, -1722236479, 0x3a271d1d, 0x27b99e9e,
            -650583583, -351012616, 0x2bb39898, 0x22331111, -759469719, -1452221991, 0x7898e8e, 0x33a79494, 0x2db69b9b, 0x3c221e1e, 0x15928787, -920589847, -2025206066, -1426107051, 0x50782828, -1518673953,
            0x38f8c8c, 0x59f8a1a1, 0x9808989, 0x1a170d0d, 0x65dabfbf, -684595482, -2067381694, -793221016, -2101132991, 0x29b09999, 0x5a772d2d, 0x1e110f0f, 0x7bcbb0b0, -1459858348, 0x6dd6bbbb, 0x2c3a1616
        };
        [Modifiers(0x1a)]
        private static int[] Tinv0 = new int[] { 
            0x50a7f451, 0x5365417e, -1012656358, -1772214470, -882136261, -247096033, -1420232020, -1828461749, 0x55fa3020, -160598355, -1854485368, 0x254c02f5, -52959921, -674551099, -2143013594, -1885117771,
            0x495ab1de, 0x671bba25, -1743852987, -507445667, 0x2752fc3, 0x12f04c81, -1550367091, -956705941, -413167869, -1784901099, -344298049, -631680363, 0x2d83bed4, -752782248, 0x2969e049, 0x44c8c98e,
            0x6a89c275, 0x78798ef4, 0x6b3e5899, -579749593, -1236278850, 0x17ad88f0, 0x66ac20c9, -1271214467, 0x184adf63, -2110711067, 0x60335197, 0x457f5362, -529046351, -2068943941, 0x1ca081fe, -1809118983,
            0x58684870, 0x19fd458f, -2022908268, -1208452270, 0x23d373ab, -503166094, 0x578f1fe3, 0x2aab5566, 0x728ebb2, 0x3c2b52f, -1703164538, -1526188077, -226023376, -1297760477, -1167457534, 0x5c8216ed,
            0x2b1ccf8a, -1833666137, -252573709, -1578997426, -839591323, -708967162, 0x1f6234d1, -1963022652, -1655493068, -1604979806, 0x32e18a05, 0x75ebf6a4, 0x39ec830b, -1427152832, 0x69f715e, 0x51106ebd,
            -108388034, 0x3d06dd96, -1375387939, 0x46bde64d, -1249028975, 0x55dc471, 0x6fd40604, -15380384, 0x24fb9819, -1746289194, -868007799, 0x779ed967, -1119688528, -2004121337, 0x385b19e7, -605108103,
            0x470a7ca1, -384875908, -920746760, 0, -2088337399, 0x48ed2b32, -1401941730, 0x4e725a6c, -67170563, 0x5638850f, 0x1ed5ae3d, 0x27392d36, 0x64d90f0a, 0x21a65c68, -783000677, 0x3a2e3624,
            -1318647284, 0xfe75793, -761860428, -1634624741, 0x4fc5c080, -1574904735, 0x694b775a, 0x161a121c, 0xaba93e2, -450191168, 0x43e0223c, 0x1d171b12, 0xb0d090e, -1379431438, -1180125651, -928440812,
            -2061897385, 0x4c0775af, -1143105042, -44007517, -1624899081, -1124765092, -985962940, 0x347efb5b, 0x7629438b, -590994485, 0x68fcedb6, 0x63f1e4b8, -891538985, 0x10856342, 0x40229713, 0x2011c684,
            0x7d244a85, -130171950, 0x1132f9ae, 0x6da129c7, 0x4b2f9e1d, -214912292, -330136051, -790380169, 0x6c16b32b, -1715900247, -95906799, 0x2264e947, -997393240, 0x1a3ff0a0, -668172970, -275762398,
            -951170681, -1043253031, -22885748, 0x360bd498, -813566554, 0x28de7aa5, 0x268eb7da, -1530942145, -459458004, 0xd927850, -1681105046, 0x62467e54, -1038905866, -390539120, 0x5ef7392e, -173030526,
            -1098883681, 0x7c93d069, -1456614033, -1290656305, 0x3b99acc8, -1484974064, 0x6e639ce8, 0x7bbb3bdb, 0x97826cd, -199730834, 0x1b79aec, -1466282109, 0x656e95e6, 0x7ee6ffaa, 0x8cfbc21, -420997649,
            -644094022, -835293366, -737566742, -696471511, -1347247055, 0x31233f2a, 0x3094a5c6, -1067015627, 0x37bc4e74, -1496677636, -1328508704, 0x15d8a733, 0x4a9804f1, -136647615, 0xe50cd7f, 0x2ff69117,
            -1915335306, 0x4db0ef43, 0x544daacc, -553347356, -474623586, 0x1b886a4c, -1205916479, 0x7f516546, 0x4ea5e9d, 0x5d358c01, 0x737487fa, 0x2e410bfb, 0x5a1d67b3, 0x52d2db92, 0x335610e9, 0x1347d66d,
            -1939744870, 0x7a0ca137, -1911228327, -1992551445, -299390514, 0x35c961b7, -303751967, 0x3cb1477a, 0x59dfd29c, 0x3f73f255, 0x79ce1418, -1086863501, -355600557, 0x5baafd5f, 0x146f3ddf, -2032450440,
            -2114736182, 0x3ec468b9, 0x2c342438, 0x5f40a3c2, 0x72c31d16, 0xc25e2bc, -1958134744, 0x41950dff, 0x7101a839, -558691320, -1662733096, -1866377628, 0x6184cb7b, 0x70b632d5, 0x745c6c48, 0x4257b8d0
        };
        [Modifiers(0x1a)]
        private static int[] Tinv1 = new int[] { 
            -1477160624, 0x65417e53, -1541989693, 0x5e273a96, 0x6bab3bcb, 0x459d1ff1, 0x58faacab, 0x3e34b93, -97509291, 0x6d76adf6, 0x76cc8891, 0x4c02f525, -672837636, -886389289, 0x44352680, -1553812081,
            0x5ab1de49, 0x1bba2567, 0xeea4598, -1057071647, 0x752fc302, -263421678, -1756983901, -103584826, 0x5f8f03e7, -1668147819, 0x7a6dbfeb, 0x595295da, -2084645843, 0x217458d3, 0x69e04929, -926314940,
            -1983744662, 0x798ef478, 0x3e58996b, 0x71b927dd, 0x4fe1beb6, -1383534569, -1407137434, 0x3ace7db4, 0x4adf6318, 0x311ae582, 0x33519760, 0x7f536245, 0x7764b1e0, -1368671356, -1602093540, 0x2b08f994,
            0x68487058, -45773031, 0x6cde9487, -126135625, -747394269, 0x24b72e2, -1893735593, -1420466646, 0x28ebb207, -1028313341, 0x7bc5869a, 0x837d3a5, -2027409166, -1514200142, 0x6a0302ba, -2112426660,
            0x1ccf8a2b, -1267095662, -234359824, -496415071, -187013683, -1106966827, 0x6234d11f, -22625142, 0x532e349d, 0x55f3a2a0, -511048398, -336157579, -326956231, -278904662, -1619960314, 0x106ebd51,
            -1977532679, 0x6dd963d, 0x53eddae, -1108980410, -1923837515, 0x5dc47105, -737803153, 0x155060ff, -73918172, -373434729, 0x434089cc, -1629919369, 0x42e8b0bd, -1953953912, 0x5b19e738, -288851493,
            0xa7ca147, 0xf427ce9, 0x1e84f8c9, 0, -2038429309, -315936184, 0x70111eac, 0x725a6c4e, -15794693, 0x38850f56, -710001378, 0x392d3627, -653325724, -1503893471, 0x545b9bd1, 0x2e36243a,
            0x670a0cb1, -413691121, -1762741038, -1852105826, -977239985, 0x20dc61a2, 0x4b775a69, 0x1a121c16, -1164713462, 0x2aa0c0e5, -534627261, 0x171b121d, 0xd090e0b, -947129683, -1464455751, -1457646392,
            0x19f15785, 0x775af4c, -577114437, 0x607fa3fd, 0x2601f79f, -177054532, 0x3b6644c5, 0x7efb5b34, 0x29438b76, -970732580, -51530136, -236668829, -600713270, -2057092592, 0x22971340, 0x11c68420,
            0x244a857d, 0x3dbbd2f8, 0x32f9ae11, -1591097491, 0x2f9e1d4b, 0x30b2dcf3, 0x52860dec, -473860144, 0x16b32b6c, -1183798887, 0x489411fa, 0x64e94722, -1929598780, 0x3ff0a01a, 0x2c7d56d8, -1875696913,
            0x4e4987c7, -784803391, -1563783938, 0xbd49836, -2114607409, -562387672, -1900553690, -1079165020, -1657131804, -1837608947, -866162021, 0x467e5462, 0x138df6c2, -1193766680, -147247522, -1346141451,
            -2141347906, -1815058052, 0x2dd56fa9, 0x1225cfb3, -1716729797, 0x7d1810a7, 0x639ce86e, -1153705093, 0x7826cd09, 0x18596ef4, -1214583807, -1706064984, 0x6e95e665, -419452290, -809754360, -401215514,
            -1679312167, 0x366f4ace, 0x99fead4, 0x7cb029d6, -1297862225, 0x233f2a31, -1801075152, 0x66a235c0, -1135709129, -897385306, -795811664, -660131051, -1744506550, -622050825, 0x50cd7f0e, -158263505,
            -699566451, -1326496947, 0x4daacc54, 0x496e4df, -1244553501, -2006299621, 0x1f2cc1b8, 0x5165467f, -362898172, 0x358c015d, 0x7487fa73, 0x410bfb2e, 0x1d67b35a, -757362094, 0x5610e933, 0x47d66d13,
            0x61d79a8c, 0xca1377a, 0x14f8598e, 0x3c13eb89, 0x27a9ceee, -916342987, -451091987, -1320715716, -539845543, 0x73f2553f, -837543815, 0x37c773bf, -839429142, -1426235557, 0x6f3ddf14, -616269690,
            -206583167, -999769794, 0x3424382c, 0x40a3c25f, -1021503886, 0x25e2bc0c, 0x493c288b, -1794244799, 0x1a83971, -1291056930, -457910116, -1051302768, -2067039391, -1238182544, 0x5c6c4874, 0x57b8d042
        };
        [Modifiers(0x1a)]
        private static int[] Tinv2 = new int[] { 
            -195997529, 0x417e5365, 0x171ac3a4, 0x273a965e, -1422144661, -1658851003, -89347240, -481586429, 0x302055fa, 0x76adf66d, -863465098, 0x2f5254c, -447742761, 0x2ac5d7cb, 0x35268044, 0x62b58fa3,
            -1310832294, -1171953893, -364537842, -27401792, 0x2fc30275, 0x4c8112f0, 0x468da397, -747911431, -1895569569, -1844079204, 0x6dbfeb7a, 0x5295da59, -1093390973, 0x7458d321, -532076183, -913423160,
            -1032492407, -1896580999, 0x58996b3e, -1188569743, -507595185, -1997531219, 0x20c966ac, -830622662, -547153846, 0x1ae58231, 0x51976033, 0x5362457f, 0x64b1e077, 0x6bbb84ae, -2114052960, 0x8f9942b,
            0x48705868, 0x458f19fd, -560691348, 0x7b52b7f8, 0x73ab23d3, 0x4b72e202, 0x1fe3578f, 0x55662aab, -340654296, -1255210046, -981034373, 0x37d3a508, 0x2830f287, -1088179547, 0x302ba6a, 0x16ed5c82,
            -813028580, 0x79a792b4, 0x7f3f0f2, 0x694ea1e2, -630862348, 0x506d5be, 0x34d11f62, -1497068802, 0x2e349d53, -207445931, -1979370783, -156994069, -2096416276, 0x6040aaef, 0x715e069f, 0x6ebd5110,
            0x213ef98a, -577356538, 0x3eddae05, -431143235, 0x5491b58d, -999226019, 0x6046fd4, 0x5060ff15, -1743182597, -1110009879, 0x4089cc43, -647530594, -391070398, -1995994997, 0x19e7385b, -931537938,
            0x7ca1470a, 0x427ce90f, -2064070370, 0, -2146860154, 0x2b3248ed, 0x111eac70, 0x5a6c4e72, 0xefdfbff, -2062592456, -1371726123, 0x2d362739, 0xf0a64d9, 0x5c6821a6, 0x5b9bd154, 0x36243a2e,
            0xa0cb167, 0x57930fe7, -290139498, -1692688751, -1065332795, -597581280, 0x775a694b, 0x121c161a, -1813902662, -1597971158, 0x223c43e0, 0x1b121d17, 0x90e0b0d, -1947030073, -1238517336, 0x1e14c8a9,
            -245922535, 0x75af4c07, -1712407587, 0x7fa3fd60, 0x1f79f26, 0x725cbcf5, 0x6644c53b, -77908866, 0x438b7629, 0x23cbdcc6, -306812676, -457677839, 0x31d7cadc, 0x63421085, -1760346078, -964419567,
            0x4a857d24, -1143801795, -106032846, 0x29c76da1, -1642247377, -1294142672, -2045907886, -1049112349, -1288999914, 0x70a999b9, -1810761144, -381214108, -56048500, -257942977, 0x7d56d82c, 0x3322ef90,
            0x4987c74e, 0x38d9c1d1, -896729438, -728222197, -173617279, 0x7aa528de, -1210440050, -1388337985, 0x3a2ce49d, 0x78500d92, 0x5f6a9bcc, 0x7e546246, -1913208301, -661591880, 0x392e5ef7, -1014827601,
            0x5d9fbe80, -798393197, -714102483, 0x25cfb312, -1396163687, 0x1810a77d, -1662488989, 0x3bdb7bbb, 0x26cd0978, 0x596ef418, -1695809097, 0x4f83a89a, -1780062866, -5603610, -1138685745, 0x15efe6e8,
            -407184997, 0x6f4ace36, -1612000247, -1339435396, -1540247630, 0x3f2a3123, -1513738092, -1573535642, 0x4e7437bc, -2097371446, -1864322864, -1489824296, 0x4f14a98, -331221030, -847311280, -1860751370,
            0x4d768dd6, -280801872, -1429449651, -1763385596, -778116171, 0x6a4c1b88, 0x2cc1b81f, 0x65467f51, 0x5e9d04ea, -1946067659, -2013629580, 0xbfb2e41, 0x67b35a1d, -611167534, 0x10e93356, -697494713,
            -677737375, -1590199796, -128348652, 0x13eb893c, -1446056409, 0x61b735c9, 0x1ce1ede5, 0x477a3cb1, -761505313, -229294221, 0x141879ce, -948715721, -145495347, -44082262, 0x3ddf146f, 0x447886db,
            -1345682957, 0x68b93ec4, 0x24382c34, -1547542720, 0x1d1672c3, -490992603, 0x3c288b49, 0xdff4195, -1472630527, 0xc08deb3, -1260872476, 0x566490c1, -881106556, 0x32d570b6, 0x6c48745c, -1194311081
        };
        [Modifiers(0x1a)]
        private static int[] Tinv3 = new int[] { 
            0x5150a7f4, 0x7e536541, 0x1ac3a417, 0x3a965e27, 0x3bcb6bab, 0x1ff1459d, -1398056710, 0x4b9303e3, 0x2055fa30, -1376359050, -2003732788, -182105086, 0x4ffcd7e5, -975713494, 0x26804435, -1248877726,
            -565617999, 0x25671bba, 0x45980eea, 0x5de1c0fe, -1023249105, -2129465268, -1918658746, 0x6bc6f9d3, 0x3e75f8f, 0x15959c92, -1075086739, -1780852398, -735214658, 0x58d32174, 0x492969e0, -1908094775,
            0x756a89c2, -193431154, -1721024936, 0x27dd71b9, -1095348255, -266883704, -916018144, 0x7db43ace, 0x63184adf, -444452582, -1755303087, 0x62457f53, -1310689436, -1148932501, -31678335, -107730168,
            0x70586848, -1894122171, -1803064098, 0x52b7f87b, -1423715469, 0x72e2024b, -480800993, 0x662aab55, -1308153621, 0x2f03c2b5, -2036696123, -744159177, 0x30f28728, 0x23b2a5bf, 0x2ba6a03, -312704490,
            -1976886065, -1483557767, -202313209, 0x4ea1e269, 0x65cdf4da, 0x6d5be05, -786472396, -997523802, 0x349d532e, -1566550541, 0x532e18a, -1535775754, 0xb39ec83, 0x40aaef60, 0x5e069f71, -1118760850,
            0x3ef98a21, -1774385443, -575797954, 0x4d46bde6, -1850372780, 0x71055dc4, 0x46fd406, 0x60ff1550, 0x1924fb98, -694687299, -1983102144, 0x67779ed9, -1329773848, 0x7888b89, -415737063, 0x79dbeec8,
            -1589179780, 0x7ce90f42, -121037180, 0, 0x9838680, 0x3248ed2b, 0x1eac7011, 0x6c4e725a, -33816818, 0xf563885, 0x3d1ed5ae, 0x3627392d, 0xa64d90f, 0x6821a65c, -1680780197, 0x243a2e36,
            0xcb1670a, -1827674281, -1261267218, 0x1b9e919b, -2142255680, 0x61a220dc, 0x5a694b77, 0x1c161a12, -502613357, -1058723168, 0x3c43e022, 0x121d171b, 0xe0b0d09, -223492213, 0x2db9a8b6, 0x14c8a91e,
            0x578519f1, -1353971851, -289677927, -1543675777, -140564991, 0x5cbcf572, 0x44c53b66, 0x5b347efb, -1955190461, -874723805, -1234633491, -1201409564, -674571215, 0x42108563, 0x13402297, -2078273082,
            -2055396278, -755483205, -1374604551, -949116631, 0x1d4b2f9e, -588042062, 0xdec5286, 0x77d0e3c1, 0x2b6c16b3, -1449543312, 0x11fa4894, 0x472264e9, -1463513860, -1608892432, 0x56d82c7d, 0x22ef9033,
            -2016981431, -641609416, -1929469238, -1741288492, -1496350219, -1524048262, -635007305, 0x3fa4bfad, 0x2ce49d3a, 0x500d9278, 0x6a9bcc5f, 0x5462467e, -155053171, -1863796520, 0x2e5ef739, -2097827901,
            -1614905251, 0x697c93d0, 0x6fa92dd5, -810347995, -935618132, 0x10a77d18, -395418724, -612648133, -855017434, 0x6ef41859, -335431782, -2086102449, -429560171, -1434523905, 0x2108cfbc, -270079979,
            -1160143897, 0x4ace366f, -355202657, 0x29d67cb0, 0x31afb2a4, 0x2a31233f, -969894747, 0x35c066a2, 0x7437bc4e, -56178046, -525283184, 0x3315d8a7, -246769660, 0x41f7daec, 0x7f0e50cd, 0x172ff691,
            0x768dd64d, 0x434db0ef, -866890326, -455146346, -1629243951, 0x4c1b886a, -1044898004, 0x467f5165, -1660622242, 0x15d358c, -93096825, -80854773, -1285939865, -1840065829, -382511600, 0x6d1347d6,
            -1702075945, 0x377a0ca1, 0x598e14f8, -343327725, -823253079, -1221211807, -504503012, 0x7a3cb147, -1671831598, 0x553f73f2, 0x1879ce14, 0x73bf37c7, 0x53eacdf7, 0x5f5baafd, -552308931, 0x7886db44,
            -897453137, -1187068824, 0x382c3424, -1033944925, 0x1672c31d, -1140054558, 0x288b493c, -12479219, 0x397101a8, 0x8deb30c, -660806476, 0x6490c156, 0x7b6184cb, -714033614, 0x48745c6c, -800958536
        };
        private int[][] WorkingKey;

        [MethodImpl(MethodImplOptions.NoInlining)]
        public static void __<clinit>()
        {
        }

        [LineNumberTable(new byte[] { 
            0xa2, 0xad, 0x77, 0x77, 0x77, 0x97, 0x89, 0x67, 0x7f, 0x3b, 0x7f, 0x3b, 0x7f, 0x3b, 0x7f, 0x40,
            0x7f, 0x2d, 0x7f, 0x2d, 0x7f, 0x2d, 0xbf, 0x36, 0x7f, 0x3b, 0x7f, 0x3b, 0x7f, 0x3b, 0xdf, 60,
            0x7f, 0x35, 0x7f, 0x35, 0x7f, 0x35, 0x7f, 0x35
        })]
        private void decryptBlock(int[][] numArrayArray1)
        {
            int num2;
            int num3;
            int num4;
            int num5;
            this.C0 ^= numArrayArray1[this.ROUNDS][0];
            this.C1 ^= numArrayArray1[this.ROUNDS][1];
            this.C2 ^= numArrayArray1[this.ROUNDS][2];
            this.C3 ^= numArrayArray1[this.ROUNDS][3];
            int index = this.ROUNDS - 1;
            while (true)
            {
                if (index <= 1)
                {
                    break;
                }
                num2 = (((Tinv0[this.C0 & 0xff] ^ Tinv1[(this.C3 >> 8) & 0xff]) ^ Tinv2[(this.C2 >> 0x10) & 0xff]) ^ Tinv3[(this.C1 >> 0x18) & 0xff]) ^ numArrayArray1[index][0];
                num3 = (((Tinv0[this.C1 & 0xff] ^ Tinv1[(this.C0 >> 8) & 0xff]) ^ Tinv2[(this.C3 >> 0x10) & 0xff]) ^ Tinv3[(this.C2 >> 0x18) & 0xff]) ^ numArrayArray1[index][1];
                num4 = (((Tinv0[this.C2 & 0xff] ^ Tinv1[(this.C1 >> 8) & 0xff]) ^ Tinv2[(this.C0 >> 0x10) & 0xff]) ^ Tinv3[(this.C3 >> 0x18) & 0xff]) ^ numArrayArray1[index][2];
                index += -1;
                num5 = (((Tinv0[this.C3 & 0xff] ^ Tinv1[(this.C2 >> 8) & 0xff]) ^ Tinv2[(this.C1 >> 0x10) & 0xff]) ^ Tinv3[(this.C0 >> 0x18) & 0xff]) ^ numArrayArray1[index][3];
                this.C0 = (((Tinv0[num2 & 0xff] ^ Tinv1[(num5 >> 8) & 0xff]) ^ Tinv2[(num4 >> 0x10) & 0xff]) ^ Tinv3[(num3 >> 0x18) & 0xff]) ^ numArrayArray1[index][0];
                this.C1 = (((Tinv0[num3 & 0xff] ^ Tinv1[(num2 >> 8) & 0xff]) ^ Tinv2[(num5 >> 0x10) & 0xff]) ^ Tinv3[(num4 >> 0x18) & 0xff]) ^ numArrayArray1[index][1];
                this.C2 = (((Tinv0[num4 & 0xff] ^ Tinv1[(num3 >> 8) & 0xff]) ^ Tinv2[(num2 >> 0x10) & 0xff]) ^ Tinv3[(num5 >> 0x18) & 0xff]) ^ numArrayArray1[index][2];
                index += -1;
                this.C3 = (((Tinv0[num5 & 0xff] ^ Tinv1[(num4 >> 8) & 0xff]) ^ Tinv2[(num3 >> 0x10) & 0xff]) ^ Tinv3[(num2 >> 0x18) & 0xff]) ^ numArrayArray1[index][3];
            }
            num2 = (((Tinv0[this.C0 & 0xff] ^ Tinv1[(this.C3 >> 8) & 0xff]) ^ Tinv2[(this.C2 >> 0x10) & 0xff]) ^ Tinv3[(this.C1 >> 0x18) & 0xff]) ^ numArrayArray1[index][0];
            num3 = (((Tinv0[this.C1 & 0xff] ^ Tinv1[(this.C0 >> 8) & 0xff]) ^ Tinv2[(this.C3 >> 0x10) & 0xff]) ^ Tinv3[(this.C2 >> 0x18) & 0xff]) ^ numArrayArray1[index][1];
            num4 = (((Tinv0[this.C2 & 0xff] ^ Tinv1[(this.C1 >> 8) & 0xff]) ^ Tinv2[(this.C0 >> 0x10) & 0xff]) ^ Tinv3[(this.C3 >> 0x18) & 0xff]) ^ numArrayArray1[index][2];
            num5 = (((Tinv0[this.C3 & 0xff] ^ Tinv1[(this.C2 >> 8) & 0xff]) ^ Tinv2[(this.C1 >> 0x10) & 0xff]) ^ Tinv3[(this.C0 >> 0x18) & 0xff]) ^ numArrayArray1[index][3];
            this.C0 = (((Si[num2 & 0xff] ^ (Si[(num5 >> 8) & 0xff] << 8)) ^ (Si[(num4 >> 0x10) & 0xff] << 0x10)) ^ (Si[(num3 >> 0x18) & 0xff] << 0x18)) ^ numArrayArray1[0][0];
            this.C1 = (((Si[num3 & 0xff] ^ (Si[(num2 >> 8) & 0xff] << 8)) ^ (Si[(num5 >> 0x10) & 0xff] << 0x10)) ^ (Si[(num4 >> 0x18) & 0xff] << 0x18)) ^ numArrayArray1[0][1];
            this.C2 = (((Si[num4 & 0xff] ^ (Si[(num3 >> 8) & 0xff] << 8)) ^ (Si[(num2 >> 0x10) & 0xff] << 0x10)) ^ (Si[(num5 >> 0x18) & 0xff] << 0x18)) ^ numArrayArray1[0][2];
            this.C3 = (((Si[num5 & 0xff] ^ (Si[(num4 >> 8) & 0xff] << 8)) ^ (Si[(num3 >> 0x10) & 0xff] << 0x10)) ^ (Si[(num2 >> 0x18) & 0xff] << 0x18)) ^ numArrayArray1[0][3];
        }

        [LineNumberTable(new byte[] { 
            0xa2, 0x8b, 0x72, 0x72, 0x72, 0x92, 0x62, 110, 0x7f, 0x3b, 0x7f, 0x3b, 0x7f, 0x3b, 0x7f, 0x40,
            0x7f, 0x2d, 0x7f, 0x2d, 0x7f, 0x2d, 0xbf, 0x36, 0x7f, 0x3b, 0x7f, 0x3b, 0x7f, 0x3b, 0xdf, 0x40,
            0x7f, 0x35, 0x7f, 0x35, 0x7f, 0x35, 0x9f, 0x35
        })]
        private void encryptBlock(int[][] numArrayArray1)
        {
            int num2;
            int num3;
            int num4;
            int num5;
            this.C0 ^= numArrayArray1[0][0];
            this.C1 ^= numArrayArray1[0][1];
            this.C2 ^= numArrayArray1[0][2];
            this.C3 ^= numArrayArray1[0][3];
            int index = 1;
            while (true)
            {
                if (index >= (this.ROUNDS - 1))
                {
                    break;
                }
                num2 = (((T0[this.C0 & 0xff] ^ T1[(this.C1 >> 8) & 0xff]) ^ T2[(this.C2 >> 0x10) & 0xff]) ^ T3[(this.C3 >> 0x18) & 0xff]) ^ numArrayArray1[index][0];
                num3 = (((T0[this.C1 & 0xff] ^ T1[(this.C2 >> 8) & 0xff]) ^ T2[(this.C3 >> 0x10) & 0xff]) ^ T3[(this.C0 >> 0x18) & 0xff]) ^ numArrayArray1[index][1];
                num4 = (((T0[this.C2 & 0xff] ^ T1[(this.C3 >> 8) & 0xff]) ^ T2[(this.C0 >> 0x10) & 0xff]) ^ T3[(this.C1 >> 0x18) & 0xff]) ^ numArrayArray1[index][2];
                index++;
                num5 = (((T0[this.C3 & 0xff] ^ T1[(this.C0 >> 8) & 0xff]) ^ T2[(this.C1 >> 0x10) & 0xff]) ^ T3[(this.C2 >> 0x18) & 0xff]) ^ numArrayArray1[index][3];
                this.C0 = (((T0[num2 & 0xff] ^ T1[(num3 >> 8) & 0xff]) ^ T2[(num4 >> 0x10) & 0xff]) ^ T3[(num5 >> 0x18) & 0xff]) ^ numArrayArray1[index][0];
                this.C1 = (((T0[num3 & 0xff] ^ T1[(num4 >> 8) & 0xff]) ^ T2[(num5 >> 0x10) & 0xff]) ^ T3[(num2 >> 0x18) & 0xff]) ^ numArrayArray1[index][1];
                this.C2 = (((T0[num4 & 0xff] ^ T1[(num5 >> 8) & 0xff]) ^ T2[(num2 >> 0x10) & 0xff]) ^ T3[(num3 >> 0x18) & 0xff]) ^ numArrayArray1[index][2];
                index++;
                this.C3 = (((T0[num5 & 0xff] ^ T1[(num2 >> 8) & 0xff]) ^ T2[(num3 >> 0x10) & 0xff]) ^ T3[(num4 >> 0x18) & 0xff]) ^ numArrayArray1[index][3];
            }
            num2 = (((T0[this.C0 & 0xff] ^ T1[(this.C1 >> 8) & 0xff]) ^ T2[(this.C2 >> 0x10) & 0xff]) ^ T3[(this.C3 >> 0x18) & 0xff]) ^ numArrayArray1[index][0];
            num3 = (((T0[this.C1 & 0xff] ^ T1[(this.C2 >> 8) & 0xff]) ^ T2[(this.C3 >> 0x10) & 0xff]) ^ T3[(this.C0 >> 0x18) & 0xff]) ^ numArrayArray1[index][1];
            num4 = (((T0[this.C2 & 0xff] ^ T1[(this.C3 >> 8) & 0xff]) ^ T2[(this.C0 >> 0x10) & 0xff]) ^ T3[(this.C1 >> 0x18) & 0xff]) ^ numArrayArray1[index][2];
            index++;
            num5 = (((T0[this.C3 & 0xff] ^ T1[(this.C0 >> 8) & 0xff]) ^ T2[(this.C1 >> 0x10) & 0xff]) ^ T3[(this.C2 >> 0x18) & 0xff]) ^ numArrayArray1[index][3];
            this.C0 = (((S[num2 & 0xff] ^ (S[(num3 >> 8) & 0xff] << 8)) ^ (S[(num4 >> 0x10) & 0xff] << 0x10)) ^ (S[(num5 >> 0x18) & 0xff] << 0x18)) ^ numArrayArray1[index][0];
            this.C1 = (((S[num3 & 0xff] ^ (S[(num4 >> 8) & 0xff] << 8)) ^ (S[(num5 >> 0x10) & 0xff] << 0x10)) ^ (S[(num2 >> 0x18) & 0xff] << 0x18)) ^ numArrayArray1[index][1];
            this.C2 = (((S[num4 & 0xff] ^ (S[(num5 >> 8) & 0xff] << 8)) ^ (S[(num2 >> 0x10) & 0xff] << 0x10)) ^ (S[(num3 >> 0x18) & 0xff] << 0x18)) ^ numArrayArray1[index][2];
            this.C3 = (((S[num5 & 0xff] ^ (S[(num2 >> 8) & 0xff] << 8)) ^ (S[(num3 >> 0x10) & 0xff] << 0x10)) ^ (S[(num4 >> 0x18) & 0xff] << 0x18)) ^ numArrayArray1[index][3];
        }

        private int FFmulX(int num1) => 
            (((num1 & 0x7f7f7f7f) << 1) ^ (((num1 & -2139062144) >> 7) * 0x1b));

        [MethodImpl(MethodImplOptions.NoInlining), LineNumberTable(new byte[] { 
            0x9e, 0xf7, 0x42, 0xa5, 0x73, 0xb0, 0x69, 0xff, 13, 70, 0x63, 0x63, 0x66, 0x7f, 14, 0x66,
            0xe8, 0x47, 0x6c, 0x6c, 0x72, 0x6f, 0x7f, 9, 0x74, 170, 0xff, 0, 0x38, 0xeb, 0x4b, 0x63,
            0x6d, 0x68, 0x36, 40, 0xe8, 0x47
        })]
        private int[][] generateWorkingKey(byte[] buffer1, bool flag1)
        {
            int num7;
            int expressionStack_DD_0;
            int expressionStack_FA_1;
            int[] expressionStack_FA_2;
            int expressionStack_FA_3;
            int expressionStack_FF_0;
            int[] expressionStack_FF_1;
            int expressionStack_FF_2;
            int expressionStack_118_0;
            int num = (int) flag1;
            int num2 = buffer1.Length / 4;
            if ((((num2 != 4) && (num2 != 6)) && (num2 != 8)) || ((num2 * 4) != buffer1.Length))
            {
                Throwable.__<suppressFillInStackTrace>();
                throw new IllegalArgumentException("Key length not 128/192/256 bits.");
            }
            this.ROUNDS = num2 + 6;
            int[] numArray = new int[2];
            int num3 = 4;
            numArray[1] = num3;
            num3 = this.ROUNDS + 1;
            numArray[0] = num3;
            int[][] numArray2 = (int[][]) ByteCodeHelper.multianewarray(typeof(int[][]).TypeHandle, numArray);
            int num4 = 0;
            int index = 0;
            while (true)
            {
                if (index >= buffer1.Length)
                {
                    break;
                }
                numArray2[num4 >> 2][num4 & 3] = ((buffer1[index] | (buffer1[index + 1] << 8)) | (buffer1[index + 2] << 0x10)) | (buffer1[index + 3] << 0x18);
                index += 4;
                num4++;
            }
            int num6 = (this.ROUNDS + 1) << 2;
            index = num2;
        Label_00B5:
            if (index >= num6)
            {
                if (num != 0)
                {
                    return numArray2;
                }
                num7 = 1;
                goto Label_0155;
            }
            num7 = numArray2[(index - 1) >> 2][(index - 1) & 3];
            if (num2 != -1)
            {
                int expressionStack_DC_1 = index;
                int expressionStack_DC_0 = num2;
                expressionStack_DD_0 = expressionStack_DC_1 % expressionStack_DC_0;
                goto Label_00DD;
            }
            else
            {
                int expressionStack_D7_1 = index;
                int expressionStack_D7_0 = num2;
            }
            expressionStack_DD_0 = 0;
        Label_00DD:
            if (expressionStack_DD_0 != 0)
            {
                if (num2 <= 6)
                {
                    goto Label_0125;
                }
                if (num2 != -1)
                {
                    int expressionStack_117_1 = index;
                    int expressionStack_117_0 = num2;
                    expressionStack_118_0 = expressionStack_117_1 % expressionStack_117_0;
                    goto Label_0118;
                }
                else
                {
                    int expressionStack_112_1 = index;
                    int expressionStack_112_0 = num2;
                }
                expressionStack_118_0 = 0;
                goto Label_0118;
            }
            if (num2 != -1)
            {
                int expressionStack_FE_3 = this.subWord(this.shift(num7, 8));
                int[] rcon = AESFastEngine.rcon;
                int expressionStack_FE_1 = index;
                int expressionStack_FE_0 = num2;
                expressionStack_FF_2 = expressionStack_FE_3;
                expressionStack_FF_1 = rcon;
                expressionStack_FF_0 = expressionStack_FE_1 / expressionStack_FE_0;
                goto Label_00FF;
            }
            else
            {
                expressionStack_FA_3 = this.subWord(this.shift(num7, 8));
                expressionStack_FA_2 = AESFastEngine.rcon;
                expressionStack_FA_1 = index;
                int expressionStack_FA_0 = num2;
            }
            expressionStack_FF_2 = expressionStack_FA_3;
            expressionStack_FF_1 = expressionStack_FA_2;
            expressionStack_FF_0 = -expressionStack_FA_1;
        Label_00FF:
            num7 = expressionStack_FF_2 ^ expressionStack_FF_1[expressionStack_FF_0 - 1];
            goto Label_0125;
        Label_0118:
            if (expressionStack_118_0 == 4)
            {
                num7 = this.subWord(num7);
            }
        Label_0125:
            numArray2[index >> 2][index & 3] = numArray2[(index - num2) >> 2][(index - num2) & 3] ^ num7;
            index++;
            goto Label_00B5;
        Label_0155:
            if (num7 >= this.ROUNDS)
            {
                return numArray2;
            }
            index = 0;
            while (true)
            {
                if (index >= 4)
                {
                    break;
                }
                numArray2[num7][index] = this.inv_mcol(numArray2[num7][index]);
                index++;
            }
            num7++;
            goto Label_0155;
        }

        public virtual string getAlgorithmName() => 
            "AES";

        public virtual int getBlockSize() => 
            0x10;

        [MethodImpl(MethodImplOptions.NoInlining), LineNumberTable(new byte[] { 0x9e, 0xe8, 0x62, 0x73, 0x67 })]
        public virtual void init(bool forEncryption, KeyParameter @params)
        {
            int num = (int) forEncryption;
            this.WorkingKey = this.generateWorkingKey(@params.getKey(), (bool) num);
            this.forEncryption = (bool) num;
        }

        [MethodImpl(MethodImplOptions.NoInlining), LineNumberTable(new byte[] { 0xa1, 0xd5, 0x68, 0x68, 0x68, 0x84 })]
        private int inv_mcol(int num1)
        {
            int num = this.FFmulX(num1);
            int num2 = this.FFmulX(num);
            int num3 = this.FFmulX(num2);
            int num4 = num1 ^ num3;
            return (((((num ^ num2) ^ num3) ^ this.shift(num ^ num4, 8)) ^ this.shift(num2 ^ num4, 0x10)) ^ this.shift(num4, 0x18));
        }

        [LineNumberTable(new byte[] { 
            0xa2, 0x71, 130, 110, 0x70, 0x71, 0x91, 110, 0x70, 0x71, 0x91, 110, 0x70, 0x71, 0x91, 110,
            0x70, 0x71, 0x71
        })]
        private void packBlock(byte[] buffer1, int num1)
        {
            int index = num1;
            index++;
            buffer1[index] = (byte) ((sbyte) this.C0);
            index++;
            buffer1[index] = (byte) ((sbyte) (this.C0 >> 8));
            index++;
            buffer1[index] = (byte) ((sbyte) (this.C0 >> 0x10));
            index++;
            buffer1[index] = (byte) ((sbyte) (this.C0 >> 0x18));
            index++;
            buffer1[index] = (byte) ((sbyte) this.C1);
            index++;
            buffer1[index] = (byte) ((sbyte) (this.C1 >> 8));
            index++;
            buffer1[index] = (byte) ((sbyte) (this.C1 >> 0x10));
            index++;
            buffer1[index] = (byte) ((sbyte) (this.C1 >> 0x18));
            index++;
            buffer1[index] = (byte) ((sbyte) this.C2);
            index++;
            buffer1[index] = (byte) ((sbyte) (this.C2 >> 8));
            index++;
            buffer1[index] = (byte) ((sbyte) (this.C2 >> 0x10));
            index++;
            buffer1[index] = (byte) ((sbyte) (this.C2 >> 0x18));
            index++;
            buffer1[index] = (byte) ((sbyte) this.C3);
            index++;
            buffer1[index] = (byte) ((sbyte) (this.C3 >> 8));
            index++;
            buffer1[index] = (byte) ((sbyte) (this.C3 >> 0x10));
            index++;
            buffer1[index] = (byte) ((sbyte) (this.C3 >> 0x18));
        }

        [MethodImpl(MethodImplOptions.NoInlining), LineNumberTable(new byte[] { 0xa2, 0x38, 0x68, 0xb0, 0x68, 0xb0, 0x69, 0xb0, 0x68, 0x68, 0x6c, 0x8b, 0x68, 0x6c, 0xa9 })]
        public virtual int processBlock(byte[] @in, int inOff, byte[] @out, int outOff)
        {
            if (this.WorkingKey == null)
            {
                Throwable.__<suppressFillInStackTrace>();
                throw new IllegalStateException("AES engine not initialised");
            }
            if ((inOff + 0x10) > @in.Length)
            {
                Throwable.__<suppressFillInStackTrace>();
                throw new RuntimeException("input buffer too short");
            }
            if ((outOff + 0x10) > @out.Length)
            {
                Throwable.__<suppressFillInStackTrace>();
                throw new RuntimeException("output buffer too short");
            }
            if (this.forEncryption)
            {
                this.unpackBlock(@in, inOff);
                this.encryptBlock(this.WorkingKey);
                this.packBlock(@out, outOff);
            }
            else
            {
                this.unpackBlock(@in, inOff);
                this.decryptBlock(this.WorkingKey);
                this.packBlock(@out, outOff);
            }
            return 0x10;
        }

        public virtual void reset()
        {
        }

        private int shift(int num1, int num2) => 
            ((num1 >> num2) | (num1 << -num2));

        [LineNumberTable(0x250)]
        private int subWord(int num1) => 
            (((S[num1 & 0xff] | (S[(num1 >> 8) & 0xff] << 8)) | (S[(num1 >> 0x10) & 0xff] << 0x10)) | (S[(num1 >> 0x18) & 0xff] << 0x18));

        [LineNumberTable(new byte[] { 
            0xa2, 0x57, 130, 0x6d, 0x76, 0x77, 0x97, 0x6d, 0x76, 0x77, 0x97, 0x6d, 0x76, 0x77, 0x97, 0x6d,
            0x76, 0x77, 0x77
        })]
        private void unpackBlock(byte[] buffer1, int num1)
        {
            int index = num1;
            index++;
            this.C0 = buffer1[index];
            index++;
            this.C0 |= buffer1[index] << 8;
            index++;
            this.C0 |= buffer1[index] << 0x10;
            index++;
            this.C0 |= buffer1[index] << 0x18;
            index++;
            this.C1 = buffer1[index];
            index++;
            this.C1 |= buffer1[index] << 8;
            index++;
            this.C1 |= buffer1[index] << 0x10;
            index++;
            this.C1 |= buffer1[index] << 0x18;
            index++;
            this.C2 = buffer1[index];
            index++;
            this.C2 |= buffer1[index] << 8;
            index++;
            this.C2 |= buffer1[index] << 0x10;
            index++;
            this.C2 |= buffer1[index] << 0x18;
            index++;
            this.C3 = buffer1[index];
            index++;
            this.C3 |= buffer1[index] << 8;
            index++;
            this.C3 |= buffer1[index] << 0x10;
            index++;
            this.C3 |= buffer1[index] << 0x18;
        }
    }
}

